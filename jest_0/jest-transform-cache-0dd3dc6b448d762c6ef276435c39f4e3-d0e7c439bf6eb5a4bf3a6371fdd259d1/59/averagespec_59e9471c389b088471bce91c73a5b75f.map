{"version":3,"sources":["average.spec.js"],"names":["average","require","describe","it","averageMock","jest","fn","params","mathRandom","Math","floor","random","testParameters","repeat","parametersArray","forEach","each","push","Number","expect","length","toBe","any","toHaveReturnedWith","undefined"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,gBAAD,CAAvB,C,CAEA;AACA;AACA;;;AAEAC,QAAQ,CAAC,UAAD,EAAa,MAAM;AACzBC,EAAAA,EAAE,CAAC,qCAAD,EAAwC,MAAM;AAC9C,UAAMC,WAAW,GAAGC,IAAI,CAACC,EAAL,CAAQ,CAAC,GAAGC,MAAJ,KAAeP,OAAO,CAAC,GAAGO,MAAJ,CAA9B,CAApB;AACA,UAAMC,UAAU,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,EAA3B,CAAnB;AACA,UAAMC,cAAc,GAAG,IAAIC,MAAJ,CAAWL,UAAX,CAAvB;AACA,UAAMM,eAAe,GAAG,EAAxB;AACA,KAAC,GAAGF,cAAJ,EAAoBG,OAApB,CAA4BC,IAAI,IAAI;AAClC,aAAOF,eAAe,CAACG,IAAhB,CAAqBC,MAAM,CAACF,IAAD,CAA3B,CAAP;AACD,KAFD;AAIAG,IAAAA,MAAM,CAAC,CAAC,GAAGP,cAAJ,EAAoBQ,MAArB,CAAN,CAAmCC,IAAnC,CAAwCF,MAAM,CAACG,GAAP,CAAWJ,MAAX,CAAxC;AACAd,IAAAA,WAAW,CAAC,GAAGU,eAAJ,CAAX;AACAK,IAAAA,MAAM,CAACf,WAAD,CAAN,CAAoBmB,kBAApB,CAAuCJ,MAAM,CAACG,GAAP,CAAWJ,MAAX,CAAvC;AACAd,IAAAA,WAAW,CAAC,IAAD,CAAX;AACAe,IAAAA,MAAM,CAACf,WAAD,CAAN,CAAoBmB,kBAApB,CAAuCC,SAAvC;AACD,GAdC,CAAF;AAgBArB,EAAAA,EAAE,CAAC,uCAAD,EAA0C,MAAM;AAChDgB,IAAAA,MAAM,CAACnB,OAAO,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAR,CAAN,CAAyBqB,IAAzB,CAA8B,CAA9B;AACD,GAFC,CAAF;AAGD,CApBO,CAAR","sourcesContent":["const average = require('../src/average');\n\n// A função deve receber uma quantidade qualquer de parâmetros\n// A função deve retornar a média dos números que receber\n// Caso a função receba algum valor não número, o valor undefined deve ser retornado\n\ndescribe('#average', () => {\n  it('receives any quantity of parameters', () => {\n    const averageMock = jest.fn((...params) => average(...params));\n    const mathRandom = Math.floor(Math.random() * 10);\n    const testParameters = '1'.repeat(mathRandom);\n    const parametersArray = [];\n    [...testParameters].forEach(each => {\n      return parametersArray.push(Number(each))\n    });\n\n    expect([...testParameters].length).toBe(expect.any(Number));\n    averageMock(...parametersArray)\n    expect(averageMock).toHaveReturnedWith(expect.any(Number));\n    averageMock('oi')\n    expect(averageMock).toHaveReturnedWith(undefined);\n  });\n\n  it('expect average of 3, 4, 5 should be 4', () => {\n    expect(average(3, 4, 5)).toBe(4);\n  });\n});\n"]}