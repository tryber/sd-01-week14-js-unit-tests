1d995d9fb6b459574ecf805b321a9b46
const duplicate = require('../src/duplicate'); // A função deve receber uma quantidade qualquer de parâmetros
// A função pode receber strings e números
// A função retornar true se existirem valores duplicados e false caso contrário


describe('#duplicate', () => {
  it('the params 1, 2, 3 are not duplicated', () => {
    expect(duplicate(1, 2, 3)).toBeFalsy();
  });
  it('the params 1, 2, 3, 2 are duplicated', () => {
    expect(duplicate(1, 2, 3, 2)).toBeTruthy();
  });
  it('the function returns false when no string is duplicated', () => {
    expect(duplicate('a', 'b', 'carro')).toBeFalsy();
  });
  it('the function returns truth when a string is duplicated', () => {
    expect(duplicate('carro', 'a', 'b', 'carro')).toBeTruthy();
  });
  it('if the params dont receive string or numbers as parameters returns warning string', () => {
    const duplicateMock = jest.fn((...params) => duplicate(...params));
    duplicateMock('string', 'anotherString');
    expect(duplicateMock).not.toHaveReturnedWith('Insira strings ou numeros');
    duplicateMock(1, 2, 3, 4, 5);
    expect(duplicateMock).not.toHaveReturnedWith('Insira strings ou numeros');
    duplicateMock({
      1: 'space',
      2: 'space'
    });
    expect(duplicateMock).toHaveReturnedWith('Insira strings ou numeros');
    duplicateMock([1, 2, 3, 4]);
    expect(duplicateMock).toHaveReturnedWith('Insira strings ou numeros');
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImR1cGxpY2F0ZS5zcGVjLmpzIl0sIm5hbWVzIjpbImR1cGxpY2F0ZSIsInJlcXVpcmUiLCJkZXNjcmliZSIsIml0IiwiZXhwZWN0IiwidG9CZUZhbHN5IiwidG9CZVRydXRoeSIsImR1cGxpY2F0ZU1vY2siLCJqZXN0IiwiZm4iLCJwYXJhbXMiLCJub3QiLCJ0b0hhdmVSZXR1cm5lZFdpdGgiXSwibWFwcGluZ3MiOiJBQUFBLE1BQU1BLFNBQVMsR0FBR0MsT0FBTyxDQUFDLGtCQUFELENBQXpCLEMsQ0FFQTtBQUNBO0FBQ0E7OztBQUVBQyxRQUFRLENBQUMsWUFBRCxFQUFlLE1BQU07QUFDM0JDLEVBQUFBLEVBQUUsQ0FBQyx1Q0FBRCxFQUEwQyxNQUFNO0FBQ2hEQyxJQUFBQSxNQUFNLENBQUNKLFNBQVMsQ0FBQyxDQUFELEVBQUksQ0FBSixFQUFPLENBQVAsQ0FBVixDQUFOLENBQTJCSyxTQUEzQjtBQUNELEdBRkMsQ0FBRjtBQUlBRixFQUFBQSxFQUFFLENBQUMsc0NBQUQsRUFBeUMsTUFBTTtBQUMvQ0MsSUFBQUEsTUFBTSxDQUFDSixTQUFTLENBQUMsQ0FBRCxFQUFJLENBQUosRUFBTyxDQUFQLEVBQVUsQ0FBVixDQUFWLENBQU4sQ0FBOEJNLFVBQTlCO0FBQ0QsR0FGQyxDQUFGO0FBR0FILEVBQUFBLEVBQUUsQ0FBRSx5REFBRixFQUE2RCxNQUFNO0FBQ25FQyxJQUFBQSxNQUFNLENBQUNKLFNBQVMsQ0FBQyxHQUFELEVBQU0sR0FBTixFQUFXLE9BQVgsQ0FBVixDQUFOLENBQXFDSyxTQUFyQztBQUNELEdBRkMsQ0FBRjtBQUdBRixFQUFBQSxFQUFFLENBQUUsd0RBQUYsRUFBNEQsTUFBTTtBQUNsRUMsSUFBQUEsTUFBTSxDQUFDSixTQUFTLENBQUMsT0FBRCxFQUFTLEdBQVQsRUFBYyxHQUFkLEVBQW1CLE9BQW5CLENBQVYsQ0FBTixDQUE2Q00sVUFBN0M7QUFDRCxHQUZDLENBQUY7QUFHQUgsRUFBQUEsRUFBRSxDQUFDLG1GQUFELEVBQXNGLE1BQU07QUFDNUYsVUFBTUksYUFBYSxHQUFHQyxJQUFJLENBQUNDLEVBQUwsQ0FBUSxDQUFDLEdBQUdDLE1BQUosS0FBZVYsU0FBUyxDQUFDLEdBQUdVLE1BQUosQ0FBaEMsQ0FBdEI7QUFDQUgsSUFBQUEsYUFBYSxDQUFDLFFBQUQsRUFBVSxlQUFWLENBQWI7QUFDQUgsSUFBQUEsTUFBTSxDQUFDRyxhQUFELENBQU4sQ0FBc0JJLEdBQXRCLENBQTBCQyxrQkFBMUIsQ0FBNkMsMkJBQTdDO0FBQ0FMLElBQUFBLGFBQWEsQ0FBQyxDQUFELEVBQUcsQ0FBSCxFQUFLLENBQUwsRUFBTyxDQUFQLEVBQVMsQ0FBVCxDQUFiO0FBQ0FILElBQUFBLE1BQU0sQ0FBQ0csYUFBRCxDQUFOLENBQXNCSSxHQUF0QixDQUEwQkMsa0JBQTFCLENBQTZDLDJCQUE3QztBQUNBTCxJQUFBQSxhQUFhLENBQUM7QUFBQyxTQUFHLE9BQUo7QUFBYSxTQUFFO0FBQWYsS0FBRCxDQUFiO0FBQ0FILElBQUFBLE1BQU0sQ0FBQ0csYUFBRCxDQUFOLENBQXNCSyxrQkFBdEIsQ0FBeUMsMkJBQXpDO0FBQ0FMLElBQUFBLGFBQWEsQ0FBQyxDQUFDLENBQUQsRUFBRyxDQUFILEVBQUssQ0FBTCxFQUFPLENBQVAsQ0FBRCxDQUFiO0FBQ0FILElBQUFBLE1BQU0sQ0FBQ0csYUFBRCxDQUFOLENBQXNCSyxrQkFBdEIsQ0FBeUMsMkJBQXpDO0FBQ0QsR0FWQyxDQUFGO0FBV0QsQ0F6Qk8sQ0FBUiIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGR1cGxpY2F0ZSA9IHJlcXVpcmUoJy4uL3NyYy9kdXBsaWNhdGUnKTtcblxuLy8gQSBmdW7Dp8OjbyBkZXZlIHJlY2ViZXIgdW1hIHF1YW50aWRhZGUgcXVhbHF1ZXIgZGUgcGFyw6JtZXRyb3Ncbi8vIEEgZnVuw6fDo28gcG9kZSByZWNlYmVyIHN0cmluZ3MgZSBuw7ptZXJvc1xuLy8gQSBmdW7Dp8OjbyByZXRvcm5hciB0cnVlIHNlIGV4aXN0aXJlbSB2YWxvcmVzIGR1cGxpY2Fkb3MgZSBmYWxzZSBjYXNvIGNvbnRyw6FyaW9cblxuZGVzY3JpYmUoJyNkdXBsaWNhdGUnLCAoKSA9PiB7XG4gIGl0KCd0aGUgcGFyYW1zIDEsIDIsIDMgYXJlIG5vdCBkdXBsaWNhdGVkJywgKCkgPT4ge1xuICAgIGV4cGVjdChkdXBsaWNhdGUoMSwgMiwgMykpLnRvQmVGYWxzeSgpO1xuICB9KTtcblxuICBpdCgndGhlIHBhcmFtcyAxLCAyLCAzLCAyIGFyZSBkdXBsaWNhdGVkJywgKCkgPT4ge1xuICAgIGV4cGVjdChkdXBsaWNhdGUoMSwgMiwgMywgMikpLnRvQmVUcnV0aHkoKTtcbiAgfSk7XG4gIGl0ICgndGhlIGZ1bmN0aW9uIHJldHVybnMgZmFsc2Ugd2hlbiBubyBzdHJpbmcgaXMgZHVwbGljYXRlZCcsICgpID0+IHtcbiAgICBleHBlY3QoZHVwbGljYXRlKCdhJywgJ2InLCAnY2Fycm8nKSkudG9CZUZhbHN5KCk7XG4gIH0pO1xuICBpdCAoJ3RoZSBmdW5jdGlvbiByZXR1cm5zIHRydXRoIHdoZW4gYSBzdHJpbmcgaXMgZHVwbGljYXRlZCcsICgpID0+IHtcbiAgICBleHBlY3QoZHVwbGljYXRlKCdjYXJybycsJ2EnLCAnYicsICdjYXJybycpKS50b0JlVHJ1dGh5KCk7XG4gIH0pO1xuICBpdCgnaWYgdGhlIHBhcmFtcyBkb250IHJlY2VpdmUgc3RyaW5nIG9yIG51bWJlcnMgYXMgcGFyYW1ldGVycyByZXR1cm5zIHdhcm5pbmcgc3RyaW5nJywgKCkgPT4ge1xuICAgIGNvbnN0IGR1cGxpY2F0ZU1vY2sgPSBqZXN0LmZuKCguLi5wYXJhbXMpID0+IGR1cGxpY2F0ZSguLi5wYXJhbXMpKTtcbiAgICBkdXBsaWNhdGVNb2NrKCdzdHJpbmcnLCdhbm90aGVyU3RyaW5nJyk7XG4gICAgZXhwZWN0KGR1cGxpY2F0ZU1vY2spLm5vdC50b0hhdmVSZXR1cm5lZFdpdGgoJ0luc2lyYSBzdHJpbmdzIG91IG51bWVyb3MnKTtcbiAgICBkdXBsaWNhdGVNb2NrKDEsMiwzLDQsNSk7XG4gICAgZXhwZWN0KGR1cGxpY2F0ZU1vY2spLm5vdC50b0hhdmVSZXR1cm5lZFdpdGgoJ0luc2lyYSBzdHJpbmdzIG91IG51bWVyb3MnKTtcbiAgICBkdXBsaWNhdGVNb2NrKHsxOiAnc3BhY2UnLCAyOidzcGFjZSd9KTtcbiAgICBleHBlY3QoZHVwbGljYXRlTW9jaykudG9IYXZlUmV0dXJuZWRXaXRoKCdJbnNpcmEgc3RyaW5ncyBvdSBudW1lcm9zJyk7XG4gICAgZHVwbGljYXRlTW9jayhbMSwyLDMsNF0pO1xuICAgIGV4cGVjdChkdXBsaWNhdGVNb2NrKS50b0hhdmVSZXR1cm5lZFdpdGgoJ0luc2lyYSBzdHJpbmdzIG91IG51bWVyb3MnKTtcbiAgfSk7XG59KTtcbiJdfQ==