{"version":3,"sources":["duplicate.spec.js"],"names":["duplicate","require","describe","it","expect","toBeFalsy","toBeTruthy","duplicateMock","jest","fn","params","not","toHaveReturnedWith"],"mappings":"AAAA,MAAMA,SAAS,GAAGC,OAAO,CAAC,kBAAD,CAAzB,C,CAEA;AACA;AACA;;;AAEAC,QAAQ,CAAC,YAAD,EAAe,MAAM;AAC3BC,EAAAA,EAAE,CAAC,uCAAD,EAA0C,MAAM;AAChDC,IAAAA,MAAM,CAACJ,SAAS,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAV,CAAN,CAA2BK,SAA3B;AACD,GAFC,CAAF;AAIAF,EAAAA,EAAE,CAAC,sCAAD,EAAyC,MAAM;AAC/CC,IAAAA,MAAM,CAACJ,SAAS,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,CAAV,CAAN,CAA8BM,UAA9B;AACD,GAFC,CAAF;AAGAH,EAAAA,EAAE,CAAE,yDAAF,EAA6D,MAAM;AACnEC,IAAAA,MAAM,CAACJ,SAAS,CAAC,GAAD,EAAM,GAAN,EAAW,OAAX,CAAV,CAAN,CAAqCK,SAArC;AACD,GAFC,CAAF;AAGAF,EAAAA,EAAE,CAAC,mFAAD,EAAsF,MAAM;AAC5F,UAAMI,aAAa,GAAGC,IAAI,CAACC,EAAL,CAAQ,CAAC,GAAGC,MAAJ,KAAeV,SAAS,CAAC,GAAGU,MAAJ,CAAhC,CAAtB;AACAH,IAAAA,aAAa,CAAC,QAAD,EAAU,eAAV,CAAb;AACAH,IAAAA,MAAM,CAACG,aAAD,CAAN,CAAsBI,GAAtB,CAA0BC,kBAA1B,CAA6C,2BAA7C;AACAL,IAAAA,aAAa,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,EAAO,CAAP,EAAS,CAAT,CAAb;AACAH,IAAAA,MAAM,CAACG,aAAD,CAAN,CAAsBI,GAAtB,CAA0BC,kBAA1B,CAA6C,2BAA7C;AACAL,IAAAA,aAAa,CAAC;AAAC,SAAG,OAAJ;AAAa,SAAE;AAAf,KAAD,CAAb;AACAH,IAAAA,MAAM,CAACG,aAAD,CAAN,CAAsBK,kBAAtB,CAAyC,2BAAzC;AACAL,IAAAA,aAAa,CAAC,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,EAAO,CAAP,CAAD,CAAb;AACAH,IAAAA,MAAM,CAACG,aAAD,CAAN,CAAsBK,kBAAtB,CAAyC,2BAAzC;AACD,GAVC,CAAF;AAWD,CAtBO,CAAR","sourcesContent":["const duplicate = require('../src/duplicate');\n\n// A função deve receber uma quantidade qualquer de parâmetros\n// A função pode receber strings e números\n// A função retornar true se existirem valores duplicados e false caso contrário\n\ndescribe('#duplicate', () => {\n  it('the params 1, 2, 3 are not duplicated', () => {\n    expect(duplicate(1, 2, 3)).toBeFalsy();\n  });\n\n  it('the params 1, 2, 3, 2 are duplicated', () => {\n    expect(duplicate(1, 2, 3, 2)).toBeTruthy();\n  });\n  it ('the function returns false when no string is duplicated', () => {\n    expect(duplicate('a', 'b', 'carro')).toBeFalsy();\n  })\n  it('if the params dont receive string or numbers as parameters returns warning string', () => {\n    const duplicateMock = jest.fn((...params) => duplicate(...params));\n    duplicateMock('string','anotherString');\n    expect(duplicateMock).not.toHaveReturnedWith('Insira strings ou numeros');\n    duplicateMock(1,2,3,4,5);\n    expect(duplicateMock).not.toHaveReturnedWith('Insira strings ou numeros');\n    duplicateMock({1: 'space', 2:'space'});\n    expect(duplicateMock).toHaveReturnedWith('Insira strings ou numeros');\n    duplicateMock([1,2,3,4]);\n    expect(duplicateMock).toHaveReturnedWith('Insira strings ou numeros');\n  });\n});\n"]}