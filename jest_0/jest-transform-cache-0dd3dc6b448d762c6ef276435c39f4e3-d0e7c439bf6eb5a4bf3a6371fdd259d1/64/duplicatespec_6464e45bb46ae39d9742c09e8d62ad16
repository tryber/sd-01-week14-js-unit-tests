b4453f1264d23040d1670b42f8d18178
const duplicate = require('../src/duplicate'); // A função deve receber uma quantidade qualquer de parâmetros
// A função pode receber strings e números
// A função retornar true se existirem valores duplicados e false caso contrário


describe('#duplicate', () => {
  it('the params 1, 2, 3 are not duplicated', () => {
    expect(duplicate(1, 2, 3)).toBeFalsy();
  });
  it('the params 1, 2, 3, 2 are duplicated', () => {
    expect(duplicate(1, 2, 3, 2)).toBeTruthy();
  });
  it('the function returns false when no string is duplicated', () => {
    expect(duplicate('a', 'b', 'carro')).toBeFalsy();
  });
  it('if the params dont receive string or numbers as parameters returns warning string', () => {
    const duplicateMock = jest.fn((...params) => duplicate(...params));
    duplicateMock('string', 'anotherString');
    expect(duplicateMock).not.toHaveReturnedWith('Insira strings ou numeros');
    duplicateMock(1, 2, 3, 4, 5);
    expect(duplicateMock).not.toHaveReturnedWith('Insira strings ou numeros');
    duplicateMock({
      1: 'space',
      2: 'space'
    });
    expect(duplicateMock).toHaveReturnedWith('Insira strings ou numeros');
    duplicateMock([1, 2, 3, 4]);
    expect(duplicateMock).toHaveReturnedWith('Insira strings ou numeros');
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImR1cGxpY2F0ZS5zcGVjLmpzIl0sIm5hbWVzIjpbImR1cGxpY2F0ZSIsInJlcXVpcmUiLCJkZXNjcmliZSIsIml0IiwiZXhwZWN0IiwidG9CZUZhbHN5IiwidG9CZVRydXRoeSIsImR1cGxpY2F0ZU1vY2siLCJqZXN0IiwiZm4iLCJwYXJhbXMiLCJub3QiLCJ0b0hhdmVSZXR1cm5lZFdpdGgiXSwibWFwcGluZ3MiOiJBQUFBLE1BQU1BLFNBQVMsR0FBR0MsT0FBTyxDQUFDLGtCQUFELENBQXpCLEMsQ0FFQTtBQUNBO0FBQ0E7OztBQUVBQyxRQUFRLENBQUMsWUFBRCxFQUFlLE1BQU07QUFDM0JDLEVBQUFBLEVBQUUsQ0FBQyx1Q0FBRCxFQUEwQyxNQUFNO0FBQ2hEQyxJQUFBQSxNQUFNLENBQUNKLFNBQVMsQ0FBQyxDQUFELEVBQUksQ0FBSixFQUFPLENBQVAsQ0FBVixDQUFOLENBQTJCSyxTQUEzQjtBQUNELEdBRkMsQ0FBRjtBQUlBRixFQUFBQSxFQUFFLENBQUMsc0NBQUQsRUFBeUMsTUFBTTtBQUMvQ0MsSUFBQUEsTUFBTSxDQUFDSixTQUFTLENBQUMsQ0FBRCxFQUFJLENBQUosRUFBTyxDQUFQLEVBQVUsQ0FBVixDQUFWLENBQU4sQ0FBOEJNLFVBQTlCO0FBQ0QsR0FGQyxDQUFGO0FBR0FILEVBQUFBLEVBQUUsQ0FBRSx5REFBRixFQUE2RCxNQUFNO0FBQ25FQyxJQUFBQSxNQUFNLENBQUNKLFNBQVMsQ0FBQyxHQUFELEVBQU0sR0FBTixFQUFXLE9BQVgsQ0FBVixDQUFOLENBQXFDSyxTQUFyQztBQUNELEdBRkMsQ0FBRjtBQUdBRixFQUFBQSxFQUFFLENBQUMsbUZBQUQsRUFBc0YsTUFBTTtBQUM1RixVQUFNSSxhQUFhLEdBQUdDLElBQUksQ0FBQ0MsRUFBTCxDQUFRLENBQUMsR0FBR0MsTUFBSixLQUFlVixTQUFTLENBQUMsR0FBR1UsTUFBSixDQUFoQyxDQUF0QjtBQUNBSCxJQUFBQSxhQUFhLENBQUMsUUFBRCxFQUFVLGVBQVYsQ0FBYjtBQUNBSCxJQUFBQSxNQUFNLENBQUNHLGFBQUQsQ0FBTixDQUFzQkksR0FBdEIsQ0FBMEJDLGtCQUExQixDQUE2QywyQkFBN0M7QUFDQUwsSUFBQUEsYUFBYSxDQUFDLENBQUQsRUFBRyxDQUFILEVBQUssQ0FBTCxFQUFPLENBQVAsRUFBUyxDQUFULENBQWI7QUFDQUgsSUFBQUEsTUFBTSxDQUFDRyxhQUFELENBQU4sQ0FBc0JJLEdBQXRCLENBQTBCQyxrQkFBMUIsQ0FBNkMsMkJBQTdDO0FBQ0FMLElBQUFBLGFBQWEsQ0FBQztBQUFDLFNBQUcsT0FBSjtBQUFhLFNBQUU7QUFBZixLQUFELENBQWI7QUFDQUgsSUFBQUEsTUFBTSxDQUFDRyxhQUFELENBQU4sQ0FBc0JLLGtCQUF0QixDQUF5QywyQkFBekM7QUFDQUwsSUFBQUEsYUFBYSxDQUFDLENBQUMsQ0FBRCxFQUFHLENBQUgsRUFBSyxDQUFMLEVBQU8sQ0FBUCxDQUFELENBQWI7QUFDQUgsSUFBQUEsTUFBTSxDQUFDRyxhQUFELENBQU4sQ0FBc0JLLGtCQUF0QixDQUF5QywyQkFBekM7QUFDRCxHQVZDLENBQUY7QUFXRCxDQXRCTyxDQUFSIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgZHVwbGljYXRlID0gcmVxdWlyZSgnLi4vc3JjL2R1cGxpY2F0ZScpO1xuXG4vLyBBIGZ1bsOnw6NvIGRldmUgcmVjZWJlciB1bWEgcXVhbnRpZGFkZSBxdWFscXVlciBkZSBwYXLDom1ldHJvc1xuLy8gQSBmdW7Dp8OjbyBwb2RlIHJlY2ViZXIgc3RyaW5ncyBlIG7Dum1lcm9zXG4vLyBBIGZ1bsOnw6NvIHJldG9ybmFyIHRydWUgc2UgZXhpc3RpcmVtIHZhbG9yZXMgZHVwbGljYWRvcyBlIGZhbHNlIGNhc28gY29udHLDoXJpb1xuXG5kZXNjcmliZSgnI2R1cGxpY2F0ZScsICgpID0+IHtcbiAgaXQoJ3RoZSBwYXJhbXMgMSwgMiwgMyBhcmUgbm90IGR1cGxpY2F0ZWQnLCAoKSA9PiB7XG4gICAgZXhwZWN0KGR1cGxpY2F0ZSgxLCAyLCAzKSkudG9CZUZhbHN5KCk7XG4gIH0pO1xuXG4gIGl0KCd0aGUgcGFyYW1zIDEsIDIsIDMsIDIgYXJlIGR1cGxpY2F0ZWQnLCAoKSA9PiB7XG4gICAgZXhwZWN0KGR1cGxpY2F0ZSgxLCAyLCAzLCAyKSkudG9CZVRydXRoeSgpO1xuICB9KTtcbiAgaXQgKCd0aGUgZnVuY3Rpb24gcmV0dXJucyBmYWxzZSB3aGVuIG5vIHN0cmluZyBpcyBkdXBsaWNhdGVkJywgKCkgPT4ge1xuICAgIGV4cGVjdChkdXBsaWNhdGUoJ2EnLCAnYicsICdjYXJybycpKS50b0JlRmFsc3koKTtcbiAgfSlcbiAgaXQoJ2lmIHRoZSBwYXJhbXMgZG9udCByZWNlaXZlIHN0cmluZyBvciBudW1iZXJzIGFzIHBhcmFtZXRlcnMgcmV0dXJucyB3YXJuaW5nIHN0cmluZycsICgpID0+IHtcbiAgICBjb25zdCBkdXBsaWNhdGVNb2NrID0gamVzdC5mbigoLi4ucGFyYW1zKSA9PiBkdXBsaWNhdGUoLi4ucGFyYW1zKSk7XG4gICAgZHVwbGljYXRlTW9jaygnc3RyaW5nJywnYW5vdGhlclN0cmluZycpO1xuICAgIGV4cGVjdChkdXBsaWNhdGVNb2NrKS5ub3QudG9IYXZlUmV0dXJuZWRXaXRoKCdJbnNpcmEgc3RyaW5ncyBvdSBudW1lcm9zJyk7XG4gICAgZHVwbGljYXRlTW9jaygxLDIsMyw0LDUpO1xuICAgIGV4cGVjdChkdXBsaWNhdGVNb2NrKS5ub3QudG9IYXZlUmV0dXJuZWRXaXRoKCdJbnNpcmEgc3RyaW5ncyBvdSBudW1lcm9zJyk7XG4gICAgZHVwbGljYXRlTW9jayh7MTogJ3NwYWNlJywgMjonc3BhY2UnfSk7XG4gICAgZXhwZWN0KGR1cGxpY2F0ZU1vY2spLnRvSGF2ZVJldHVybmVkV2l0aCgnSW5zaXJhIHN0cmluZ3Mgb3UgbnVtZXJvcycpO1xuICAgIGR1cGxpY2F0ZU1vY2soWzEsMiwzLDRdKTtcbiAgICBleHBlY3QoZHVwbGljYXRlTW9jaykudG9IYXZlUmV0dXJuZWRXaXRoKCdJbnNpcmEgc3RyaW5ncyBvdSBudW1lcm9zJyk7XG4gIH0pO1xufSk7XG4iXX0=