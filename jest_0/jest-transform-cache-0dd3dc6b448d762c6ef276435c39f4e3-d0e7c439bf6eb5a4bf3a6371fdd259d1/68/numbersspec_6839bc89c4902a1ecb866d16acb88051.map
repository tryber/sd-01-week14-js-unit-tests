{"version":3,"sources":["numbers.spec.js"],"names":["numbers","require","describe","it","expect","toBeTruthy","toBeFalsy","NaN"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,gBAAD,CAAvB,C,CAEA;AACA;AACA;;;AAEAC,QAAQ,CAAC,UAAD,EAAa,MAAM;AACzBC,EAAAA,EAAE,CAAC,sCAAD,EAAyC,MAAM;AAC/CC,IAAAA,MAAM,CAACJ,OAAO,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,CAAR,CAAN,CAA+BK,UAA/B;AACD,GAFC,CAAF;AAIAF,EAAAA,EAAE,CAAC,sCAAD,EAAyC,MAAM;AAC/CC,IAAAA,MAAM,CAACJ,OAAO,CAAC,CAAD,EAAI,GAAJ,EAAS,CAAT,CAAR,CAAN,CAA2BM,SAA3B;AACD,GAFC,CAAF;AAIAH,EAAAA,EAAE,CAAC,iCAAD,EAAoC,MAAM;AAC1CC,IAAAA,MAAM,CAACJ,OAAO,CAAC,CAAD,EAAI,CAAJ,EAAOO,GAAP,CAAR,CAAN,CAA2BF,UAA3B;AACD,GAFC,CAAF;AAGD,CAZO,CAAR","sourcesContent":["const numbers = require('../src/numbers');\n\n// A função deve receber uma quantidade qualquer de parâmetros\n// A função deve retornar o valor true se todos os elementos forem do tipo Number\n// A função deve retornar o valor false se algum elemento não for do tipo Number\n\ndescribe('#numbers', () => {\n  it('the params 1, 4, 3, 2, 5 are numbers', () => {\n    expect(numbers(1, 4, 3, 2, 5)).toBeTruthy();\n  });\n\n  it('the params 1, \"a\", 3 are not numbers', () => {\n    expect(numbers(1, 'a', 3)).toBeFalsy();\n  });\n\n  it('the params 1 3, NaN are numbers', () => {\n    expect(numbers(1, 3, NaN)).toBeTruthy();\n  });\n});\n"]}