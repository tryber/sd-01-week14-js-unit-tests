{"version":3,"sources":["printBinary.spec.js"],"names":["printBinary","require","describe","it","expect","toBe"],"mappings":"AAAA,MAAMA,WAAW,GAAGC,OAAO,CAAC,oBAAD,CAA3B,C,CAEA;AACA;AACA;AACA;;;AAEAC,QAAQ,CAAC,cAAD,EAAiB,MAAM;AAC7BC,EAAAA,EAAE,CAAC,qCAAD,EAAwC,MAAM;AAC9CC,IAAAA,MAAM,CAACJ,WAAW,CAAC,CAAD,CAAZ,CAAN,CAAuBK,IAAvB,CAA4B,CAAC,GAAD,EAAM,GAAN,CAA5B;AACD,GAFC,CAAF;AAIAF,EAAAA,EAAE,CAAC,qCAAD,EAAwC,MAAM;AAC9CC,IAAAA,MAAM,CAACJ,WAAW,CAAC,CAAD,CAAZ,CAAN,CAAuBK,IAAvB,CAA4B,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,EAAmB,IAAnB,CAA5B;AACD,GAFC,CAAF;AAGD,CARO,CAAR","sourcesContent":["const printBinary = require('../src/printBinary');\n\n// A função recebe um inteiro e retorna uma lista contendo todos os números em formato binário\n// que podem ser representados com a quantidade de dígitos recebidos por parâmetro\n// Se a função receber algum valor não numérico um array vazio deve ser retornado\n// Se a função receber o valor 0 (zero) um array vazio deve ser retornado\n\ndescribe('#printBinary', () => {\n  it('should print binary numbers until 1', () => {\n    expect(printBinary(1)).toBe(['0', '1']);\n  });\n\n  it('should print binary numbers until 2', () => {\n    expect(printBinary(2)).toBe(['00', '01', '10', '11']);\n  });\n});\n"]}