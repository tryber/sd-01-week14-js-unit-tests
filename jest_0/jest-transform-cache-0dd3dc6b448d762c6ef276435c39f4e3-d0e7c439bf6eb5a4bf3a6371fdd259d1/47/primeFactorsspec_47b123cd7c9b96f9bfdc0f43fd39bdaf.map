{"version":3,"sources":["primeFactors.spec.js"],"names":["primeFactors","require","describe","it","expect","toStrictEqual"],"mappings":"AAAA,MAAMA,YAAY,GAAGC,OAAO,CAAC,qBAAD,CAA5B,C,CAEA;AACA;;;AAEAC,QAAQ,CAAC,yDAAD,EAA4D,MAAM;AACxEC,EAAAA,EAAE,CAAC,sBAAD,EAAyB,MAAM;AAC/BC,IAAAA,MAAM,CAACJ,YAAY,CAAC,GAAD,CAAb,CAAN,CAA0BK,aAA1B,CAAwC,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAxC;AACD,GAFC,CAAF;AAIAF,EAAAA,EAAE,CAAC,sBAAD,EAAyB,MAAM;AAC/BC,IAAAA,MAAM,CAACJ,YAAY,CAAC,GAAD,CAAb,CAAN,CAA0BK,aAA1B,CAAwC,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAxC;AACD,GAFC,CAAF;AAGD,CARO,CAAR","sourcesContent":["const primeFactors = require('../src/primeFactors');\n\n// A função recebe um inteiro e retorna a lista com os fatores desse número\n// Se o parâmetro recebido for um valor não inteiro um erro deve ser lançado\n\ndescribe('tests if function is delivering prime factors correctly', () => {\n  it('prime factors of 100', () => {\n    expect(primeFactors(100)).toStrictEqual([1, 2, 5]);\n  });\n\n  it('prime factors of 200', () => {\n    expect(primeFactors(200)).toStrictEqual([1, 2, 5]);\n  });\n});\n"]}